@{
    ViewBag.Title = "Twilio Video Quickstart";
}

<div ng-app="twilioVideoExample" ng-controller="videoChatController">
    <div ng-repeat="(s, m) in remoteParticipants">
        <twilio-video id="remote-media" media="m"></twilio-video>
    </div>
    <div id="controls">
        <div id="preview">
            <p class="instructions">Hello Beautiful</p>
            <twilio-video id="local-media" media="previewMedia"></twilio-video>
            <button id="button-preview" ng-click="previewCamera()">Preview My Camera</button>
        </div>
        <div id="invite-controls" ng-style="clientConnected && {'display':'block'}">
            <p class="instructions">Invite another Video Client</p>
            <input id="invite-to" type="text" placeholder="Identity to send an invite to" ng-model="inviteTo" />
            <button id="button-invite" ng-click="sendInvite()">Send Invite</button>
        </div>
        <div id="log">
            <p>&gt;&nbsp;<span id="log-content" ng-bind="log">Preparing to listen</span>...</p>
        </div>
    </div>
</div>
@section scripts {

    <script type="text/javascript">
    (function (angular) {

        //'use strict';
        angular.module('twilioVideoExample', [])
            .controller('videoChatController', ['$scope', '$http', function ($scope, $http) {

                $scope.remoteParticipants = {};
                $scope.previewMedia;
                $scope.activeConversation;
                $scope.inviteTo;
                $scope.log = 'Preparing to listen';
                $scope.clientConnected = false;

                $scope.previewCamera = function () {
                    $scope.previewMedia = new Twilio.Conversations.LocalMedia();
                    Twilio.Conversations.getUserMedia().then(
                        function (mediaStream) {
                            $scope.$apply(function () {
                                $scope.previewMedia.addStream(mediaStream);
                            });
                        },
                        function (error) {
                            console.error('Unable to access local media', error);
                        });
                }

                $scope.sendInvite = function () {
                    if ($scope.activeConversation) {
                        // Add a participant
                        $scope.activeConversation.invite($scope.inviteTo);
                    } else {
                        // Create a conversation
                        var options = {};
                        if ($scope.previewMedia) {
                            options.localMedia = $scope.previewMedia;
                        }
                        conversationsClient.inviteToConversation($scope.inviteTo, options).then(conversationStarted, function (error) {
                            $scope.$apply(function () {
                                $scope.log = 'Unable to create conversation';
                                console.error('Unable to create conversation', error);
                            });
                        });
                    }
                };

                $http.get('/token').then(function (response) {
                    identity = response.data.identity;
                    var accessManager = new Twilio.AccessManager(response.data.token);

                    console.log(identity);

                    conversationsClient = new Twilio.Conversations.Client(accessManager);
                    conversationsClient.listen().then(clientConnected, function (error) {
                        $scope.$apply(function () {
                            $scope.log = 'Could not connect to Twilio: ' + error.message;
                        });
                    });
                });

                // Successfully connected!
                function clientConnected() {
                    $scope.clientConnected = true;

                    $scope.$apply(function () {
                        $scope.log = "Connected to Twilio. Listening for incoming Invites as '" + conversationsClient.identity + "'";
                        console.log("Connected to Twilio. Listening for incoming Invites as '" + conversationsClient.identity + "'");
                    });

                    conversationsClient.on('invite', function (invite) {
                        $scope.$apply(function () {
                            $scope.log = 'Incoming invite from: ' + invite.from;
                            invite.accept().then(conversationStarted);
                        });
                    });
                }

                function conversationStarted(conversation) {
                    $scope.$apply(function () {
                        $scope.log = 'In an active Conversation';
                        $scope.activeConversation = conversation;
                    });

                    if (!$scope.previewMedia) {
                        $scope.$apply(function () {
                            $scope.previewMedia = conversation.localMedia;
                            console.log('set previewMedia: ' + $scope.previewMedia);
                        });
                    }

                    // When a participant joins, draw their video on screen
                    conversation.on('participantConnected', function (participant) {
                        $scope.$apply(function () {
                            console.log("Participant '" + participant.identity + "' connected");
                            $scope.log = "Participant '" + participant.identity + "' connected";
                            $scope.remoteParticipants[participant.sid] = participant.media;
                        });
                    });

                    // When a participant disconnects, note in log
                    conversation.on('participantDisconnected', function (participant) {
                        $scope.$apply(function () {
                            $scope.log = "Participant '" + participant.identity + "' disconnected";
                            delete $scope.remoteParticipants[participant.sid];
                        });
                    });

                    // When the conversation ends, stop capturing local video
                    conversation.on('disconnected', function (conversation) {
                        $scope.$apply(function () {
                            $scope.log = "Connected to Twilio. Listening for incoming Invites as '" + conversationsClient.identity + "'";
                        });
                        conversation.localMedia.stop();
                        $scope.clientConnected = false;
                        conversation.disconnect();
                        activeConversation = null;
                    });
                }
            }])
            .directive('twilioVideo', function ($compile) {
                return {
                    template: '<div class="twilio-video-media-container"></div>',
                    restrict: 'E',
                    scope: {
                        media: '=',
                    },
                    link: function (scope, el, $attrs) {
                        scope.$watch('media', function (newval, oldval) {
                            if (scope.media) {
                                scope.media.attach(el[0].querySelector('div'));
                            }
                        }, true);
                    }
                }
            });
    })(window.angular);

    </script>
}